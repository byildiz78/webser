openapi: 3.0.0
info:
  title: Webser2 API
  description: Web servisi analitik ve izleme API'si
  version: 1.0.0

servers:
  - url: http://localhost:5010
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter your API key as the Bearer token

  schemas:
    DateRange:
      type: object
      properties:
        startDate:
          type: string
          format: date
          example: "2024-01-01"
        endDate:
          type: string
          format: date
          example: "2024-01-31"

    AnalyticsResponse:
      type: object
      properties:
        totalRequests:
          type: array
          items:
            type: object
            properties:
              count:
                type: integer
                example: 1000
        requestsByEndpoint:
          type: array
          items:
            type: object
            properties:
              endpoint:
                type: string
                example: "/api/users"
              count:
                type: integer
                example: 500
        requestsByStatus:
          type: array
          items:
            type: object
            properties:
              status_code:
                type: integer
                example: 200
              count:
                type: integer
                example: 800
        averageResponseTime:
          type: array
          items:
            type: object
            properties:
              avg_response_time:
                type: number
                format: float
                example: 150.5
        errorRates:
          type: array
          items:
            type: object
            properties:
              endpoint:
                type: string
                example: "/api/users"
              total_requests:
                type: integer
                example: 1000
              error_count:
                type: integer
                example: 50
              error_rate:
                type: number
                format: float
                example: 5.00

    QueryRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: SQL query to execute
          example: "SELECT top 10 * FROM efr_users"
        parameters:
          type: object
          description: Optional query parameters
          additionalProperties: true

    InstantQueryResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        result:
          type: array
          items:
            type: object
            additionalProperties: true
          description: Query results
        metadata:
          type: object
          properties:
            rowCount:
              type: integer
              example: 10
            query:
              type: string
              example: "SELECT top 10 * FROM efr_users"
            executionTime:
              type: integer
              description: Query execution time in milliseconds
              example: 123

    BigQueryResponse:
      type: object
      properties:
        jobId:
          type: string
          example: "123"
        status:
          type: string
          enum: [queued, processing, completed, failed]
          example: "queued"
        message:
          type: string
          example: "Query has been queued for processing"

    JobStatus:
      type: object
      properties:
        jobId:
          type: string
          example: "123"
        status:
          type: string
          enum: [queued, processing, completed, failed]
          example: "completed"
        progress:
          type: integer
          minimum: 0
          maximum: 100
          example: 100
        startTime:
          type: string
          format: date-time
        finishTime:
          type: string
          format: date-time
        error:
          type: string
        downloadUrl:
          type: string
          example: "/api/job/result/123"

security:
  - BearerAuth: []

paths:
  /api/analytics:
    get:
      summary: Analitik verilerini getir
      description: Belirtilen tarih aralığı için analitik verilerini döndürür
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: range
          schema:
            type: string
            enum: [today, week, month]
          description: Önceden tanımlanmış zaman aralığı
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Özel tarih aralığı başlangıcı
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Özel tarih aralığı sonu
      responses:
        '200':
          description: Başarılı
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsResponse'
        '400':
          description: Geçersiz istek
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid date range"
        '500':
          description: Sunucu hatası
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /api/rate-limits:
    get:
      summary: Rate limit bilgilerini getir
      description: Mevcut rate limit durumunu ve kullanım istatistiklerini döndürür
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Başarılı
          content:
            application/json:
              schema:
                type: object
                properties:
                  limits:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                          example: "default"
                        limit:
                          type: integer
                          example: 100
                        remaining:
                          type: integer
                          example: 95
                        resetTime:
                          type: string
                          format: date-time
                          example: "2024-01-01T00:00:00Z"
        '500':
          description: Sunucu hatası
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /api/database:
    get:
      summary: List all tenants and their database IDs
      description: Returns a list of all tenants and their corresponding database IDs
      responses:
        '200':
          description: Successfully retrieved all tenant database IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tenantId:
                      type: string
                      example: "tavukdunyasi"
                    databaseId:
                      type: string
                      example: "3"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"
                  details:
                    type: object
                    properties:
                      server:
                        type: string
                      database:
                        type: string
                      user:
                        type: string
  /api/database/{tenantId}:
    get:
      summary: Get database ID for a tenant or list all tenants
      description: Returns the database ID for a specific tenant. Use "all" or leave empty to get all tenants and their database IDs.
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
          description: The ID of the tenant (e.g., tavukdunyasi, kahvedunyasi, demo) or "all" to list all tenants
          example: tavukdunyasi
      responses:
        '200':
          description: Successfully retrieved database ID(s)
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      databaseId:
                        type: string
                        example: "3"
                  - type: array
                    items:
                      type: object
                      properties:
                        tenantId:
                          type: string
                          example: "tavukdunyasi"
                        databaseId:
                          type: string
                          example: "3"
        '404':
          description: Tenant ID not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Tenant ID 'invalid' not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"
                  details:
                    type: object
                    properties:
                      server:
                        type: string
                      database:
                        type: string
                      user:
                        type: string
  /api/{databaseId}/query:
    post:
      summary: Execute SQL query with caching support
      description: Executes a SQL query and returns the results. Results may be served from cache if available and not explicitly skipped.
      parameters:
        - in: path
          name: databaseId
          required: true
          schema:
            type: string
          description: The ID of the database (e.g., 1, 2, 3)
          example: 3
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: SQL query to execute
                  example: "SELECT top 10 * FROM efr_users"
                parameters:
                  type: object
                  description: Optional query parameters
                  additionalProperties: true
                skipCache:
                  type: boolean
                  description: Whether to skip cache lookup and force query execution
                  default: false
      responses:
        '200':
          description: Query executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [completed]
                    example: "completed"
                  result:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
                    description: Query results
                  fromCache:
                    type: boolean
                    description: Whether the result was served from cache
                    example: true
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Query is required"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid API key"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /api/{databaseId}/instantquery:
    post:
      summary: Execute SQL query and get immediate results
      description: Executes a SQL query and returns the results immediately in JSON format
      parameters:
        - in: path
          name: databaseId
          required: true
          schema:
            type: string
          description: The ID of the database (e.g., 1, 2, 3)
          example: 3
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: Query executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstantQueryResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Query is required"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid API key"
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Too many requests"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  metadata:
                    type: object
                    properties:
                      query:
                        type: string
                      errorDetails:
                        type: string
  /api/{databaseId}/bigquery:
    post:
      summary: Queue a SQL query for execution
      description: Submits a SQL query for asynchronous execution
      parameters:
        - in: path
          name: databaseId
          required: true
          schema:
            type: string
          description: The ID of the database (e.g., 1, 2, 3)
          example: 3
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '202':
          description: Query accepted for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BigQueryResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Query is required"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid API key"
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Too many requests"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/{databaseId}/datamanagerquery:
    post:
      summary: Execute SQL query with advanced parameter processing and caching
      description: |
        Executes a SQL query with advanced parameter processing capabilities and caching support. 
        Supports table-prefixed parameters (e.g., table.@param), IN clauses, and automatic parameter type conversion.
      parameters:
        - in: path
          name: databaseId
          required: true
          schema:
            type: string
          description: The ID of the database (e.g., 1, 2, 3)
          example: 3
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: SQL query with parameters (e.g., @param or table.@param)
                  example: "SELECT * FROM OrderTransactions WHERE OrderTransactions.@BranchID AND OrderDateTime BETWEEN @date1 AND @date2"
                parameters:
                  type: object
                  description: Query parameters with automatic type conversion
                  example:
                    BranchID: [1, 2, 3]
                    date1: "2024-01-01"
                    date2: "2024-12-31"
                skipCache:
                  type: boolean
                  description: Whether to skip cache lookup and force query execution
                  default: false
      responses:
        '200':
          description: Query executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [completed]
                    example: "completed"
                  result:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
                    description: Query results with processed parameters
                  fromCache:
                    type: boolean
                    description: Whether the result was served from cache
                    example: true
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Query is required"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid API key"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /api/{databaseId}/job/status/{jobId}:
    get:
      summary: Get the current status of a query job
      security:
        - BearerAuth: []
      parameters:
        - name: databaseId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the database (e.g., 1, 2, 3)
        - name: jobId
          in: path
          required: true
          schema:
            type: string
          description: Job identifier

      responses:
        '200':
          description: Job status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/{databaseId}/job/result/{jobId}:
    get:
      summary: Download job results
      description: Download the query results as a ZIP file containing JSON
      security:
        - BearerAuth: []
      parameters:
        - name: databaseId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the database (e.g., 1, 2, 3)
        - name: jobId
          in: path
          required: true
          schema:
            type: string
          description: Job identifier
      responses:
        '200':
          description: Results downloaded successfully
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      summary: Execute SQL query with advanced parameter processing
      description: |
        Executes a SQL query with advanced parameter processing capabilities. 
        Supports table-prefixed parameters (e.g., table.@param), IN clauses, and automatic parameter type conversion.
      parameters:
        - name: databaseId
          in: path
          required: true
          schema:
            type: string
          description: Database identifier
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: SQL query with parameters (e.g., @param or table.@param)
                  example: "SELECT * FROM OrderTransactions WHERE OrderTransactions.@BranchID AND OrderDateTime BETWEEN @date1 AND @date2"
                parameters:
                  type: object
                  description: Query parameters with automatic type conversion
                  example:
                    BranchID: [1, 2, 3]
                    date1: "2024-01-01"
                    date2: "2024-12-31"
                skipCache:
                  type: boolean
                  description: Whether to skip cache and execute query directly
                  default: false
      responses:
        '200':
          description: Query executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstantQueryResponse'
        '400':
          description: Bad request (e.g., missing query)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
